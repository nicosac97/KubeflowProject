import kfp
from kfp import dsl
import kfp.onprem as onprem

@dsl.pipeline(name='N-IID FedAVG Pipeline', description='Applies FedAVG-FedProx to a N-IID MNIST dataset distributed between X clients ')
def niid_pipeline():
         # Run download_data task with specified input as :
    #  number of train set, number of test set , n of clients , batch size ,
    #  path where train data is going to be saved
    #  path where test data is going to be saved
    # Loads the yaml manifest for each component
        # Run tasks "fedAVG" given:
    # the output generated by "download_task".
    # number of iterations, number of epochs, value of learning rate for SGD 
    #  path where loss values is going to be saved
    #  path where accuracy values is going to be saved
    download = kfp.components.load_component_from_file('downloadNiiddata/downloadNFedAVG.yaml')
    fed_avg = kfp.components.load_component_from_file('FedAVG/fedAVG.yaml')
    fed_prox = kfp.components.load_component_from_file('FedProx/fedProx.yaml')

    pvc_name='iidfedavgpvc' 
    train_path='/mnt/mnistfed/niid/train'
    test_path='/mnt/mnistfed/niid/test'

    download_task = download()

    loss_path='/tmp/loss'
    acc_path='/tmp/acc'

    fed_avg_task = fed_avg(train_path,test_path,10,2,0.1)
    fed_prox_task = fed_prox(train_path,test_path,10,2,0.1,0.15)
    fed_avg_task.after(download_task)
    fed_prox_task.after(download_task)

    steps = [download_task,fed_avg_task,fed_prox_task]
    for step in steps:
      step.apply(onprem.mount_pvc(pvc_name, 'local-storage', '/mnt/mnistfed/niid'))        

if __name__ == '__main__':
    kfp.compiler.Compiler().compile(niid_pipeline, 'N-IIdPipeline.yaml')
    # kfp.Client().create_run_from_pipeline_func(basic_pipeline, arguments={})
