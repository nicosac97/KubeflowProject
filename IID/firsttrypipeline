import kfp
from kfp import dsl
from kfp.components import func_to_container_op


@dsl.pipeline(name='First IID FedAVG Pipeline', description='Applies FedAVG to a IID MNIST dataset distributed between X clients ')
def iid_pipeline():

    # Loads the yaml manifest for each component
    download = kfp.components.load_component_from_file('downloadfedDB/downloadfedDB.yaml')
    fed_avg = kfp.components.load_component_from_file('FedAVG/fedAVG.yaml')
    # Run download_data task with specified input as :
    #  number of train set, number of test set , n of clients , batch size ,
    #  path where train data is going to be saved
    #  path where test data is going to be saved
    
    train_path='/tmp/train'
    test_path='/tmp/test'

    download_task = download(200,100,3,25,train_path,test_path)


    loss_path='/tmp/loss'
    acc_path='/tmp/acc'
    # Run tasks "fedAVG" given:
    # the output generated by "download_task".
    # number of iterations, number of epochs, value of learning rate for SGD 
    #  path where loss values is going to be saved
    #  path where accuracy values is going to be saved
    fed_avg_task = fed_avg(train_path,test_path,10,2,0.1,loss_path,acc_path)
    

if __name__ == '__main__':
    kfp.compiler.Compiler().compile(iid_pipeline, 'IIdPipeline.yaml')
    # kfp.Client().create_run_from_pipeline_func(basic_pipeline, arguments={})